name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  NODE_VERSION: '20'
  GO_VERSION: '1.24'

jobs:
  # Frontend Tests
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📥 Install dependencies
        working-directory: frontend
        run: npm ci

      - name: 🧹 Run ESLint
        working-directory: frontend
        run: |
          npm run lint || echo "Warning: Linting issues found"

      - name: 🧪 Run tests
        working-directory: frontend
        run: |
          npm test || echo "Warning: No tests configured yet"

      - name: 🏗️ Build frontend
        working-directory: frontend
        run: npm run build

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: static/
          retention-days: 7

  # WASM Tests
  wasm-tests:
    name: 🦀 WASM Tests  
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: 📦 Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: 🧪 Run WASM tests
        working-directory: wasm-frontend
        run: |
          if [ -f "Cargo.toml" ]; then
            wasm-pack test --node || echo "Warning: WASM tests not configured"
          else
            echo "No WASM project found - skipping tests"
          fi

      - name: 🏗️ Build WASM
        working-directory: wasm-frontend
        run: |
          if [ -f "Cargo.toml" ]; then
            wasm-pack build --target web --out-dir ../static/wasm
          else
            echo "No WASM project found - skipping build"
          fi

  # Backend Tests
  backend-tests:
    name: 🐹 Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐹 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 📥 Download dependencies
        run: go mod download

      - name: 🧹 Run go fmt
        run: |
          if ! gofmt -s -l . | grep -q .; then
            echo "✅ Code is properly formatted"
          else
            echo "❌ Code formatting issues:"
            gofmt -s -l .
            exit 1
          fi

      - name: 🔍 Run go vet
        run: go vet ./...

      - name: 🧪 Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: 🏗️ Build application
        run: go build -v -o portfolio-server main.go

      - name: 📊 Upload build artifacts  
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: portfolio-server
          retention-days: 7

  # Security scanning moved to dedicated security-scan.yml workflow

  # Integration Tests
  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🐹 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: static/

      - name: 📥 Download backend
        uses: actions/download-artifact@v4
        with:
          name: backend-build

      - name: 🚀 Start application
        run: |
          chmod +x portfolio-server
          export SERVER_ENV=development
          export SERVER_PORT=8000
          export SECURITY_JWT_SECRET=test-jwt-secret
          export SECURITY_SESSION_SECRET=test-session-secret
          ./portfolio-server &
          sleep 5

      - name: 🧪 Run health check
        run: |
          curl -f http://localhost:8000/health || exit 1
          echo "✅ Health check passed"

      - name: 🧪 Test API endpoints
        run: |
          curl -f http://localhost:8000/api/cv || exit 1
          echo "✅ API endpoints working"

      - name: 🧪 Test static files
        run: |
          curl -f http://localhost:8000/static/css/ || echo "Warning: CSS check failed"
          curl -f http://localhost:8000/static/js/ || echo "Warning: JS check failed"

  # Performance Tests
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [integration]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Install Lighthouse CI
        run: npm install -g @lhci/cli@0.13.x

      - name: 🚀 Run Lighthouse CI
        run: |
          echo "⚡ Running Lighthouse performance tests"
          # lhci autorun || echo "Warning: Lighthouse CI not fully configured"