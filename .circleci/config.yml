version: 2.1

# Executors - Define execution environments
executors:
  go-executor:
    docker:
      - image: cimg/go:1.21-node
    resource_class: medium
    working_directory: ~/project

  deploy-executor:
    docker:
      - image: cimg/base:stable
    resource_class: small

# Jobs - Define individual tasks
jobs:
  # Run tests
  test:
    executor: go-executor
    steps:
      - checkout
      
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
      
      - run:
          name: Install dependencies
          command: go mod download
      
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      
      - run:
          name: Run tests
          command: go test -v ./...

  # Build everything
  build:
    executor: go-executor
    steps:
      - checkout
      
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
      
      - restore_cache:
          keys:
            - node-deps-v1-{{ checksum "frontend/package-lock.json" }}
            - node-deps-v1-
      
      - run:
          name: Install frontend dependencies
          command: |
            cd frontend
            npm ci
      
      - save_cache:
          key: node-deps-v1-{{ checksum "frontend/package-lock.json" }}
          paths:
            - frontend/node_modules
      
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
      
      - run:
          name: Build Go binary
          command: |
            GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o portfolio-server .
      
      - run:
          name: Create deployment package
          command: |
            mkdir -p deploy-package
            
            # Copy binary
            cp portfolio-server deploy-package/
            chmod +x deploy-package/portfolio-server
            
            # Copy templates and static files
            cp -r templates deploy-package/
            cp -r static deploy-package/
            
            # Create systemd service file
            printf '%s\n' '[Unit]' 'Description=Go Portfolio Website' 'After=network.target' '' '[Service]' 'Type=exec' 'User=portfolio' 'Group=portfolio' 'WorkingDirectory=/var/www/portfolio' 'ExecStart=/var/www/portfolio/portfolio-server' 'Restart=always' 'RestartSec=5' 'Environment=SERVER_ENV=production' 'LimitNOFILE=65535' '' '[Install]' 'WantedBy=multi-user.target' > deploy-package/portfolio.service
            
            # Create deployment script
            printf '%s\n' '#!/bin/bash' 'set -e' 'echo "üöÄ Starting Go deployment..."' 'sudo systemctl stop portfolio || true' 'sudo mkdir -p /var/www/portfolio' 'sudo mv /var/www/portfolio/portfolio-server /var/www/portfolio/portfolio-server.backup.$(date +%s) || true' 'sudo mv /var/www/portfolio/static /var/www/portfolio/static.backup.$(date +%s) || true' 'sudo cp portfolio-server /var/www/portfolio/' 'sudo cp -r static /var/www/portfolio/' 'sudo cp -r templates /var/www/portfolio/' 'sudo useradd -r -s /bin/false portfolio || true' 'sudo chown -R portfolio:portfolio /var/www/portfolio' 'if [ -f /etc/portfolio/production.env ]; then' '  sudo -u portfolio ln -sf /etc/portfolio/production.env /var/www/portfolio/.env' '  echo "‚úÖ Created .env symlink"' 'else' '  echo "‚ùå WARNING: No production.env found"' 'fi' 'sudo cp portfolio.service /etc/systemd/system/' 'sudo systemctl daemon-reload' 'sudo systemctl enable portfolio' 'sudo systemctl start portfolio' 'sleep 5' 'curl -f http://localhost:8080/health || exit 1' 'echo "‚úÖ Deployment completed successfully!"' > deploy-package/deploy.sh
            chmod +x deploy-package/deploy.sh
            
            # Create archive
            tar -czf portfolio-deploy.tar.gz -C deploy-package .
      
      - persist_to_workspace:
          root: .
          paths:
            - portfolio-deploy.tar.gz

  # Deploy to production
  deploy-production:
    executor: deploy-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - "SHA256:ge50UMA30q/hgTEUuAKltaEcXJO3WXliuqFvNnpTdlw"
      - run:
          name: Deploy to production server
          command: |
            echo "üöÄ Deploying Go application..."
            
            # Transfer deployment package to server
            scp -o IdentitiesOnly=yes -o StrictHostKeyChecking=no portfolio-deploy.tar.gz ubuntu@129.80.170.232:/tmp/
            
            # Execute deployment
            ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no ubuntu@129.80.170.232 'cd /tmp && rm -rf portfolio-deploy && mkdir portfolio-deploy && tar -xzf portfolio-deploy.tar.gz -C portfolio-deploy && cd portfolio-deploy && ./deploy.sh && cd /tmp && rm -rf portfolio-deploy portfolio-deploy.tar.gz'
            
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Application available at: http://129.80.170.232"

# Workflows
workflows:
  version: 2
  
  build-test-deploy:
    jobs:
      - test
      - build:
          requires:
            - test
      - deploy-production:
          requires:
            - build
          filters:
            branches:
              only: 
                - main
                - master