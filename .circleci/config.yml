version: 2.1

# Optimized CircleCI pipeline for Dockerized Go Portfolio
executors:
  docker-executor:
    docker:
      - image: cimg/base:current
    resource_class: medium
    environment:
      DOCKER_BUILDKIT: 1

jobs:
  # Build and test the Docker image
  build-and-test:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      
      - run:
          name: Build Docker image
          command: |
            echo "üê≥ Building Go portfolio Docker image..."
            docker build -t portfolio-app:${CIRCLE_SHA1} .
            docker tag portfolio-app:${CIRCLE_SHA1} portfolio-app:latest
            
            # Show image info
            docker images portfolio-app
            echo "‚úÖ Docker image built successfully"
      
      - run:
          name: Test Docker image
          command: |
            echo "üß™ Testing Docker image..."
            
            # Start container in background
            docker run -d --name test-portfolio -p 8000:8000 \
              -e SERVER_ENV=production \
              -e SERVER_PORT=8000 \
              -e SECURITY_JWT_SECRET="$SECURITY_JWT_SECRET" \
              -e SECURITY_SESSION_SECRET="$SECURITY_SESSION_SECRET" \
              portfolio-app:latest
            
            # Wait for container to be ready
            echo "‚è≥ Waiting for container to be ready..."
            i=1
            while [ $i -le 30 ]; do
              if docker exec test-portfolio wget --no-verbose --tries=1 -O- http://localhost:8000/health > /dev/null 2>&1; then
                echo "‚úÖ Container is healthy!"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "‚ùå Container failed to become healthy"
                docker logs test-portfolio
                exit 1
              fi
              sleep 2
              i=$((i + 1))
            done
            
            # Test health endpoint
            docker exec test-portfolio wget -q -O- http://localhost:8000/health
            echo "‚úÖ Health check passed"
            
            # Test homepage (should return content)
            HOMEPAGE_SIZE=$(docker exec test-portfolio wget -q -O- http://localhost:8000 | wc -c)
            if [ "$HOMEPAGE_SIZE" -gt 1000 ]; then
              echo "‚úÖ Homepage test passed (${HOMEPAGE_SIZE} bytes)"
            else
              echo "‚ùå Homepage test failed (${HOMEPAGE_SIZE} bytes)"
              exit 1
            fi
            
            # Show container stats
            echo "üìä Container stats:"
            docker stats --no-stream test-portfolio
            
            # Cleanup
            docker stop test-portfolio
            docker rm test-portfolio
      
      - run:
          name: Save Docker image for deployment
          command: |
            echo "üíæ Saving Docker image..."
            docker save portfolio-app:latest | gzip > portfolio-app.tar.gz
            ls -lh portfolio-app.tar.gz
      
      - persist_to_workspace:
          root: .
          paths:
            - portfolio-app.tar.gz

  # Deploy to production server
  deploy-production:
    executor: docker-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - "SHA256:XUKEgesVvQ7EG6ERyVsv/PnQ21/qSbQNvQN1GR47N7c"
      
      - run:
          name: Deploy to OCI server
          command: |
            echo "üöÄ Starting deployment to production server..."
            
            # Server details
            SERVER_HOST="129.80.244.212"
            SERVER_USER="ubuntu"
            
            # Transfer Docker image
            echo "üì§ Transferring Docker image..."
            scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                portfolio-app.tar.gz ${SERVER_USER}@${SERVER_HOST}:/tmp/
            
            echo "üèÉ Executing deployment on server..."
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                ${SERVER_USER}@${SERVER_HOST} \
                "export SERVER_ENV='$SERVER_ENV' && \
                 export SERVER_PORT='$SERVER_PORT' && \
                 export SERVER_LOG_LEVEL='$SERVER_LOG_LEVEL' && \
                 export SERVER_ENABLE_HTTPS='$SERVER_ENABLE_HTTPS' && \
                 export DB_MONGO_URI='$DB_MONGO_URI' && \
                 export DB_MONGO_DATABASE='$DB_MONGO_DATABASE' && \
                 export DB_MONGO_TIMEOUT='$DB_MONGO_TIMEOUT' && \
                 export DB_MONGO_MAX_POOL_SIZE='$DB_MONGO_MAX_POOL_SIZE' && \
                 export DB_MONGO_MIN_POOL_SIZE='$DB_MONGO_MIN_POOL_SIZE' && \
                 export DB_MONGO_MAX_IDLE_TIME='$DB_MONGO_MAX_IDLE_TIME' && \
                 export DB_MONGO_RETRY_READS='$DB_MONGO_RETRY_READS' && \
                 export SECURITY_JWT_SECRET='$SECURITY_JWT_SECRET' && \
                 export SECURITY_SESSION_SECRET='$SECURITY_SESSION_SECRET' && \
                 export SECURITY_CORS_ORIGINS='$SECURITY_CORS_ORIGINS' && \
                 export SECURITY_RATE_LIMIT_RPS='$SECURITY_RATE_LIMIT_RPS' && \
                 export SECURITY_ENABLE_RATE_LIMIT='$SECURITY_ENABLE_RATE_LIMIT' && \
                 export EXTERNAL_OPENAI_API_KEY='$EXTERNAL_OPENAI_API_KEY' && \
                 export EXTERNAL_OPENAI_MODEL='$EXTERNAL_OPENAI_MODEL' && \
                 export BUGSNAG_API_KEY='$BUGSNAG_API_KEY' && \
                 /opt/portfolio/deploy.sh"
            
            echo "‚úÖ Deployment completed successfully!"
            echo ""
            echo "üåê Portfolio URLs:"
            echo "  ‚Ä¢ Production: http://129.80.244.212"
            echo "  ‚Ä¢ Health check: http://129.80.244.212/health"
            echo ""
            echo "üìä Deployment summary:"
            echo "  ‚Ä¢ Image: portfolio-app:latest"
            echo "  ‚Ä¢ Container: portfolio-app"
            echo "  ‚Ä¢ Server: ${SERVER_HOST}"
            echo "  ‚Ä¢ Status: ‚úÖ Live"

  # Health check job (can be run independently)
  health-check:
    executor: docker-executor
    steps:
      - run:
          name: Check production health
          command: |
            echo "üè• Checking production server health..."
            
            SERVER_URL="http://129.80.244.212"
            
            # Check health endpoint
            if curl -f -s "${SERVER_URL}/health" -o /dev/null; then
              echo "‚úÖ Health check passed"
              curl -s "${SERVER_URL}/health" | jq . 2>/dev/null || curl -s "${SERVER_URL}/health"
            else
              echo "‚ùå Health check failed"
              exit 1
            fi
            
            # Check homepage
            HOMEPAGE_SIZE=$(curl -s "${SERVER_URL}/" | wc -c)
            if [ "$HOMEPAGE_SIZE" -gt 1000 ]; then
              echo "‚úÖ Homepage check passed (${HOMEPAGE_SIZE} bytes)"
            else
              echo "‚ùå Homepage check failed (${HOMEPAGE_SIZE} bytes)"
              exit 1
            fi
            
            echo "üéâ All health checks passed!"

# Workflows
workflows:
  # Main deployment workflow
  build-and-deploy:
    jobs:
      - build-and-test:
          filters:
            branches:
              ignore: /^dependabot\/.*/
      
      - deploy-production:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                - master
                - main
          context: production-deploy
      
      - health-check:
          requires:
            - deploy-production
          filters:
            branches:
              only:
                - master
                - main

  # Scheduled health checks (every 6 hours)
  scheduled-health-check:
    triggers:
      - schedule:
          cron: "0 0,6,12,18 * * *"
          filters:
            branches:
              only: main
    jobs:
      - health-check

  # Weekly dependency and security check
  weekly-maintenance:
    triggers:
      - schedule:
          cron: "0 2 * * 1"  # Monday at 2 AM
          filters:
            branches:
              only: main
    jobs:
      - build-and-test