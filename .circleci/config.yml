version: 2.1

executors:
  go-executor:
    docker:
      - image: cimg/go:1.21-node
    working_directory: ~/project

jobs:
  test:
    executor: go-executor
    steps:
      - checkout
      
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
      
      - run:
          name: Install dependencies
          command: go mod download
      
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      
      - run:
          name: Run tests
          command: go test -v ./...
      
      - run:
          name: Run linting
          command: |
            go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
            golangci-lint run --timeout 5m

  build:
    executor: go-executor
    steps:
      - checkout
      
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
      
      - restore_cache:
          keys:
            - node-deps-v1-{{ checksum "frontend/package-lock.json" }}
            - node-deps-v1-
      
      - run:
          name: Install frontend dependencies
          command: |
            cd frontend
            npm ci
      
      - save_cache:
          key: node-deps-v1-{{ checksum "frontend/package-lock.json" }}
          paths:
            - frontend/node_modules
      
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
      
      - run:
          name: Build Go binary
          command: |
            GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o portfolio-server .
      
      - run:
          name: Prepare deployment package
          command: |
            mkdir -p deploy
            cp portfolio-server deploy/
            cp -r static deploy/
            cp .env.example deploy/.env.example
            tar -czf deployment.tar.gz -C deploy .
      
      - persist_to_workspace:
          root: .
          paths:
            - deployment.tar.gz

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: .
      
      - add_ssh_keys:
          fingerprints:
            - "${SSH_FINGERPRINT}"
      
      - run:
          name: Setup SSH known hosts
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H 162.241.203.20 >> ~/.ssh/known_hosts
      
      - run:
          name: Deploy to VPS
          command: |
            # Upload deployment package
            scp -o StrictHostKeyChecking=no -o IdentitiesOnly=yes deployment.tar.gz ubuntu@162.241.203.20:/tmp/
            
            # Deploy on server
            ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ubuntu@162.241.203.20 \<< 'ENDSSH'
              cd /var/www/portfolio
              
              # Create production .env file if it doesn't exist
              if [ ! -f /home/portfolio/.env ]; then
                sudo -u portfolio tee /home/portfolio/.env > /dev/null << 'ENVEOF'
# Production Environment Configuration
SERVER_PORT=8080
SERVER_ENV=production
SERVER_LOG_LEVEL=info
SERVER_ENABLE_HTTPS=false

# MongoDB Configuration (REPLACE WITH REAL VALUES)
DB_MONGO_URI=mongodb+srv://production_user:production_password@cluster.mongodb.net/?retryWrites=true&w=majority
DB_MONGO_DATABASE=portfolio_prod
DB_MONGO_TIMEOUT=10
DB_MONGO_MAX_POOL_SIZE=100
DB_MONGO_MIN_POOL_SIZE=5
DB_MONGO_MAX_IDLE_TIME=300
DB_MONGO_RETRY_READS=true

# Security Configuration (REPLACE WITH REAL VALUES)
SECURITY_JWT_SECRET=your_production_jwt_secret_min_32_characters_here_change_this
SECURITY_SESSION_SECRET=your_production_session_secret_min_32_characters_here_change_this
SECURITY_CORS_ORIGINS=https://yourdomain.com
SECURITY_RATE_LIMIT_RPS=100
SECURITY_ENABLE_RATE_LIMIT=true

# External Services (REPLACE WITH REAL VALUES)
EXTERNAL_OPENAI_API_KEY=your_openai_api_key_here
EXTERNAL_OPENAI_MODEL=gpt-4

# Error Monitoring (REPLACE WITH REAL VALUE)
BUGSNAG_API_KEY=your_bugsnag_api_key_here
ENVEOF
                sudo chmod 600 /home/portfolio/.env
                sudo chown portfolio:portfolio /home/portfolio/.env
                echo "✅ Created production .env file"
              else
                echo "✅ Production .env file already exists"
              fi
              
              # Extract new files
              mkdir -p /tmp/deploy
              tar -xzf /tmp/deployment.tar.gz -C /tmp/deploy/
              
              # Copy files with correct names for deployment script
              sudo -u portfolio cp /tmp/deploy/portfolio-server portfolio-server.new
              sudo -u portfolio cp -r /tmp/deploy/static static.new
              
              # Run deployment script
              sudo -u portfolio ./deploy.sh
              
              # Cleanup
              rm -rf /tmp/deploy /tmp/deployment.tar.gz
            ENDSSH

workflows:
  version: 2
  test-build-deploy:
    jobs:
      - test
      - build:
          requires:
            - test
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - master