version: 2.1

# Executors - Define execution environments
executors:
  go-executor:
    docker:
      - image: cimg/go:1.21-node
    resource_class: medium
    working_directory: ~/project

  deploy-executor:
    docker:
      - image: cimg/base:stable
    resource_class: small

# Jobs - Define individual tasks
jobs:
  # Run tests
  test:
    executor: go-executor
    steps:
      - checkout
      
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
      
      - run:
          name: Install dependencies
          command: go mod download
      
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      
      - run:
          name: Run tests
          command: go test -v ./...
      
      - run:
          name: Run linting
          command: |
            go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
            golangci-lint run --timeout 5m

  # Build everything
  build:
    executor: go-executor
    steps:
      - checkout
      
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
      
      - restore_cache:
          keys:
            - node-deps-v1-{{ checksum "frontend/package-lock.json" }}
            - node-deps-v1-
      
      - run:
          name: Install frontend dependencies
          command: |
            cd frontend
            npm ci
      
      - save_cache:
          key: node-deps-v1-{{ checksum "frontend/package-lock.json" }}
          paths:
            - frontend/node_modules
      
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
      
      - run:
          name: Build Go binary
          command: |
            GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o portfolio-server .
      
      - run:
          name: Create deployment package
          command: |
            mkdir -p deploy-package
            
            # Copy binary
            cp portfolio-server deploy-package/
            chmod +x deploy-package/portfolio-server
            
            # Copy templates and static files
            cp -r templates deploy-package/
            cp -r static deploy-package/
            
            # Create systemd service file
            echo '[Unit]' > deploy-package/portfolio.service
            echo 'Description=Go Portfolio Website' >> deploy-package/portfolio.service
            echo 'After=network.target' >> deploy-package/portfolio.service
            echo '' >> deploy-package/portfolio.service
            echo '[Service]' >> deploy-package/portfolio.service
            echo 'Type=exec' >> deploy-package/portfolio.service
            echo 'User=portfolio' >> deploy-package/portfolio.service
            echo 'Group=portfolio' >> deploy-package/portfolio.service
            echo 'WorkingDirectory=/var/www/portfolio' >> deploy-package/portfolio.service
            echo 'ExecStart=/var/www/portfolio/portfolio-server' >> deploy-package/portfolio.service
            echo 'Restart=always' >> deploy-package/portfolio.service
            echo 'RestartSec=5' >> deploy-package/portfolio.service
            echo 'Environment=SERVER_ENV=production' >> deploy-package/portfolio.service
            echo 'LimitNOFILE=65535' >> deploy-package/portfolio.service
            echo '' >> deploy-package/portfolio.service
            echo '[Install]' >> deploy-package/portfolio.service
            echo 'WantedBy=multi-user.target' >> deploy-package/portfolio.service
            
            # Create deployment script
            echo '#!/bin/bash' > deploy-package/deploy.sh
            echo 'set -e' >> deploy-package/deploy.sh
            echo 'echo "üöÄ Starting Go deployment..."' >> deploy-package/deploy.sh
            echo 'sudo systemctl stop portfolio || true' >> deploy-package/deploy.sh
            echo 'sudo mv /var/www/portfolio/portfolio-server /var/www/portfolio/portfolio-server.backup.$(date +%s) || true' >> deploy-package/deploy.sh
            echo 'sudo mv /var/www/portfolio/static /var/www/portfolio/static.backup.$(date +%s) || true' >> deploy-package/deploy.sh
            echo 'sudo cp portfolio-server /var/www/portfolio/' >> deploy-package/deploy.sh
            echo 'sudo cp -r static /var/www/portfolio/' >> deploy-package/deploy.sh
            echo 'sudo cp -r templates /var/www/portfolio/' >> deploy-package/deploy.sh
            echo 'sudo chown -R portfolio:portfolio /var/www/portfolio' >> deploy-package/deploy.sh
            echo 'if [ ! -f /var/www/portfolio/.env ]; then' >> deploy-package/deploy.sh
            echo '  if [ -f /etc/portfolio/production.env ]; then' >> deploy-package/deploy.sh
            echo '    sudo -u portfolio ln -sf /etc/portfolio/production.env /var/www/portfolio/.env' >> deploy-package/deploy.sh
            echo '    echo "‚úÖ Created .env symlink"' >> deploy-package/deploy.sh
            echo '  else' >> deploy-package/deploy.sh
            echo '    echo "‚ùå WARNING: No production.env found"' >> deploy-package/deploy.sh
            echo '  fi' >> deploy-package/deploy.sh
            echo 'fi' >> deploy-package/deploy.sh
            echo 'sudo cp portfolio.service /etc/systemd/system/' >> deploy-package/deploy.sh
            echo 'sudo systemctl daemon-reload' >> deploy-package/deploy.sh
            echo 'sudo systemctl enable portfolio' >> deploy-package/deploy.sh
            echo 'sudo systemctl start portfolio' >> deploy-package/deploy.sh
            echo 'sleep 5' >> deploy-package/deploy.sh
            echo 'curl -f http://localhost:8080/health || exit 1' >> deploy-package/deploy.sh
            echo 'echo "‚úÖ Deployment completed successfully!"' >> deploy-package/deploy.sh
            chmod +x deploy-package/deploy.sh
            
            # Create archive
            tar -czf portfolio-deploy.tar.gz -C deploy-package .
      
      - persist_to_workspace:
          root: .
          paths:
            - portfolio-deploy.tar.gz

  # Deploy to production
  deploy-production:
    executor: deploy-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Setup SSH key
          command: |
            mkdir -p ~/.ssh
            echo "${SSH_PRIVATE_KEY}" | base64 -d > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -H 162.241.203.20 >> ~/.ssh/known_hosts
      - run:
          name: Deploy to production server
          command: |
            echo "üöÄ Deploying Go application..."
            
            # Transfer deployment package to server
            scp -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -i ~/.ssh/id_rsa portfolio-deploy.tar.gz ubuntu@162.241.203.20:/tmp/
            
            # Execute deployment
            ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -i ~/.ssh/id_rsa ubuntu@162.241.203.20 'cd /tmp && rm -rf portfolio-deploy && mkdir portfolio-deploy && tar -xzf portfolio-deploy.tar.gz -C portfolio-deploy && cd portfolio-deploy && ./deploy.sh && cd /tmp && rm -rf portfolio-deploy portfolio-deploy.tar.gz'
            
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Application available at: http://162.241.203.20"

# Workflows
workflows:
  version: 2
  
  build-test-deploy:
    jobs:
      - test
      - build:
          requires:
            - test
      - deploy-production:
          requires:
            - build
          filters:
            branches:
              only: 
                - main
                - master