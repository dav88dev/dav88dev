version: 2.1

executors:
  go-executor:
    docker:
      - image: cimg/go:1.21-node
    working_directory: ~/project

jobs:
  test:
    executor: go-executor
    steps:
      - checkout
      
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
      
      - run:
          name: Install dependencies
          command: go mod download
      
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      
      - run:
          name: Run tests
          command: go test -v ./...
      
      - run:
          name: Run linting
          command: |
            go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
            golangci-lint run --timeout 5m

  build:
    executor: go-executor
    steps:
      - checkout
      
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
      
      - restore_cache:
          keys:
            - node-deps-v1-{{ checksum "frontend/package-lock.json" }}
            - node-deps-v1-
      
      - run:
          name: Install frontend dependencies
          command: |
            cd frontend
            npm ci
      
      - save_cache:
          key: node-deps-v1-{{ checksum "frontend/package-lock.json" }}
          paths:
            - frontend/node_modules
      
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
      
      - run:
          name: Build Go binary
          command: |
            GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o portfolio-server .
      
      - run:
          name: Prepare deployment package
          command: |
            mkdir -p deploy
            cp portfolio-server deploy/
            cp -r static deploy/
            cp .env.example deploy/.env.example
            tar -czf deployment.tar.gz -C deploy .
      
      - persist_to_workspace:
          root: .
          paths:
            - deployment.tar.gz

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: .
      
      - add_ssh_keys:
          fingerprints:
            - "${SSH_FINGERPRINT}"
      
      - run:
          name: Setup SSH known hosts
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H ${VPS_HOST} >> ~/.ssh/known_hosts
      
      - run:
          name: Deploy to VPS
          command: |
            # Upload deployment package
            scp -o StrictHostKeyChecking=no deployment.tar.gz ${VPS_USER}@${VPS_HOST}:/tmp/
            
            # Deploy on server
            ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_HOST} \<< 'ENDSSH'
              cd /var/www/portfolio
              
              # Extract new files
              mkdir -p /tmp/deploy
              tar -xzf /tmp/deployment.tar.gz -C /tmp/deploy/
              
              # Copy files with correct names for deployment script
              sudo -u portfolio cp /tmp/deploy/portfolio-server portfolio-server.new
              sudo -u portfolio cp -r /tmp/deploy/static static.new
              
              # Run deployment script
              sudo -u portfolio ./deploy.sh
              
              # Cleanup
              rm -rf /tmp/deploy /tmp/deployment.tar.gz
            ENDSSH

workflows:
  version: 2
  test-build-deploy:
    jobs:
      - test
      - build:
          requires:
            - test
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - master