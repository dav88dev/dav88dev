version: 2.1

executors:
  go-executor:
    docker:
      - image: cimg/go:1.21-node
    working_directory: ~/project

jobs:
  test:
    executor: go-executor
    steps:
      - checkout
      
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
      
      - run:
          name: Install dependencies
          command: go mod download
      
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      
      - run:
          name: Run tests
          command: go test -v ./...
      
      - run:
          name: Run linting
          command: |
            go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
            golangci-lint run --timeout 5m

  build:
    executor: go-executor
    steps:
      - checkout
      
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
      
      - restore_cache:
          keys:
            - node-deps-v1-{{ checksum "frontend/package-lock.json" }}
            - node-deps-v1-
      
      - run:
          name: Install frontend dependencies
          command: |
            cd frontend
            npm ci
      
      - save_cache:
          key: node-deps-v1-{{ checksum "frontend/package-lock.json" }}
          paths:
            - frontend/node_modules
      
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
      
      - run:
          name: Build Go binary
          command: |
            GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o portfolio-server .
      
      - run:
          name: Prepare deployment package
          command: |
            mkdir -p deploy
            cp portfolio-server deploy/
            cp -r static deploy/
            cp .env.example deploy/.env.example
            tar -czf deployment.tar.gz -C deploy .
      
      - persist_to_workspace:
          root: .
          paths:
            - deployment.tar.gz

  deploy:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: .
      
      - add_ssh_keys:
          fingerprints:
            - "SHA256:ge50UMA30q/hgTEUuAKltaEcXJO3WXliuqFvNnpTdlw"
      
      - run:
          name: Debug SSH setup
          command: |
            echo "=== SSH Agent Status ==="
            ssh-add -l || echo "No SSH keys in agent"
            echo "=== SSH Config ==="
            ls -la ~/.ssh/
            echo "=== Test SSH Connection ==="
            ssh -v -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o ConnectTimeout=10 ubuntu@162.241.203.20 'echo "Connection test successful"' || echo "SSH connection failed"
      
      - run:
          name: Setup SSH known hosts
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan -H 162.241.203.20 >> ~/.ssh/known_hosts
      
      - run:
          name: Deploy to VPS
          command: |
            # Upload deployment package
            scp -o StrictHostKeyChecking=no -o IdentitiesOnly=yes deployment.tar.gz ubuntu@162.241.203.20:/tmp/
            
            # Test SSH connection first
            ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -o ConnectTimeout=30 ubuntu@162.241.203.20 'echo "SSH connection successful"'
            
            # Deploy on server with individual commands
            ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ubuntu@162.241.203.20 'cd /var/www/portfolio && echo "üîó Setting up .env symbolic link..."'
            
            ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ubuntu@162.241.203.20 'if [ ! -f /home/portfolio/.env ]; then if [ -f /etc/portfolio/production.env ]; then sudo -u portfolio ln -sf /etc/portfolio/production.env /home/portfolio/.env && echo "‚úÖ Created symbolic link"; else echo "‚ùå ERROR: Secure .env file not found" && exit 1; fi; else echo "‚úÖ .env file already exists"; fi'
            
            ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ubuntu@162.241.203.20 'cd /var/www/portfolio && echo "üì¶ Extracting deployment files..." && mkdir -p /tmp/deploy && tar -xzf /tmp/deployment.tar.gz -C /tmp/deploy/'
            
            ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ubuntu@162.241.203.20 'cd /var/www/portfolio && echo "üöÄ Deploying application..." && sudo -u portfolio cp /tmp/deploy/portfolio-server portfolio-server.new && sudo -u portfolio cp -r /tmp/deploy/static static.new'
            
            ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ubuntu@162.241.203.20 'cd /var/www/portfolio && echo "üîÑ Running deployment script..." && sudo -u portfolio ./deploy.sh'
            
            ssh -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ubuntu@162.241.203.20 'echo "üßπ Cleaning up..." && rm -rf /tmp/deploy /tmp/deployment.tar.gz && echo "‚úÖ Deployment completed successfully!"'

workflows:
  version: 2
  test-build-deploy:
    jobs:
      - test
      - build:
          requires:
            - test
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - master