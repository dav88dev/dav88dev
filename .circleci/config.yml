version: 2.1

# Orbs for simplified common tasks
orbs:
  node: circleci/node@5.1.0

# Executors - Define execution environments
executors:
  rust-executor:
    docker:
      - image: cimg/rust:1.83
    resource_class: medium
    environment:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1

  node-executor:
    docker:
      - image: cimg/node:18.19
    resource_class: small

  deploy-executor:
    docker:
      - image: cimg/base:stable
    resource_class: small

# Jobs - Define individual tasks
jobs:
  # Install and cache Rust dependencies
  setup-rust:
    executor: rust-executor
    steps:
      - checkout
      - run:
          name: Install wasm-pack
          command: |
            curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> $BASH_ENV
      - run:
          name: Install musl target for static linking
          command: rustup target add x86_64-unknown-linux-musl
      - run:
          name: Cache Rust dependencies
          command: |
            cargo fetch
            cd wasm-frontend && cargo fetch
      - save_cache:
          key: rust-deps-v2-{{ checksum "Cargo.lock" }}-{{ checksum "wasm-frontend/Cargo.lock" }}
          paths:
            - ~/.cargo/registry
            - ~/.cargo/git
            - target
            - wasm-frontend/target

  # Install and cache Node.js dependencies
  setup-frontend:
    executor: node-executor
    steps:
      - checkout
      - node/install-packages:
          app-dir: frontend
          cache-version: v2
      - save_cache:
          key: frontend-deps-v2-{{ checksum "frontend/package-lock.json" }}
          paths:
            - frontend/node_modules

  # Code quality and security checks
  code-quality:
    executor: rust-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - rust-deps-v2-{{ checksum "Cargo.lock" }}-{{ checksum "wasm-frontend/Cargo.lock" }}
            - rust-deps-v2-
      - run:
          name: Install clippy and rustfmt
          command: |
            rustup component add clippy rustfmt
      - run:
          name: Check compilation
          command: |
            cargo check --all
            cd wasm-frontend && cargo check

  # Run tests
  test:
    executor: rust-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - rust-deps-v2-{{ checksum "Cargo.lock" }}-{{ checksum "wasm-frontend/Cargo.lock" }}
            - rust-deps-v2-
      - run:
          name: Run unit tests
          command: |
            cargo test --verbose
      - run:
          name: Run integration tests
          command: |
            cargo test --all --verbose
      - store_test_results:
          path: target/test-results

  # Build frontend assets
  build-frontend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-v2-{{ checksum "frontend/package-lock.json" }}
            - frontend-deps-v2-
      - run:
          name: Build frontend assets
          command: |
            cd frontend
            npm run build
      - run:
          name: Verify build artifacts
          command: |
            ls -la static/
            test -f static/.vite/manifest.json || (echo "Vite manifest not found!" && exit 1)
      - persist_to_workspace:
          root: .
          paths:
            - static/css
            - static/js
            - static/.vite

  # Build WASM
  build-wasm:
    executor: rust-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - rust-deps-v2-{{ checksum "Cargo.lock" }}-{{ checksum "wasm-frontend/Cargo.lock" }}
            - rust-deps-v2-
      - run:
          name: Install wasm-pack
          command: |
            curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> $BASH_ENV
      - run:
          name: Build WASM package
          command: |
            cd wasm-frontend
            wasm-pack build --target web --out-dir ../static/wasm
      - run:
          name: Verify WASM artifacts
          command: |
            ls -la static/wasm/
            test -f static/wasm/wasm_frontend.js || (echo "WASM JS bindings not found!" && exit 1)
            test -f static/wasm/wasm_frontend_bg.wasm || (echo "WASM binary not found!" && exit 1)
      - persist_to_workspace:
          root: .
          paths:
            - static/wasm

  # Build Rust application
  build-rust:
    executor: rust-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - rust-deps-v2-{{ checksum "Cargo.lock" }}-{{ checksum "wasm-frontend/Cargo.lock" }}
            - rust-deps-v2-
      - run:
          name: Install musl target
          command: rustup target add x86_64-unknown-linux-musl
      - run:
          name: Build release binary
          command: |
            cargo build --release --target x86_64-unknown-linux-musl
      - run:
          name: Verify binary
          command: |
            file target/x86_64-unknown-linux-musl/release/personal_website
            ldd target/x86_64-unknown-linux-musl/release/personal_website || echo "Statically linked binary (expected)"
      - persist_to_workspace:
          root: .
          paths:
            - target/x86_64-unknown-linux-musl/release/personal_website

  # Integration tests with built artifacts
  integration-test:
    executor: rust-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Start application in background
          command: |
            chmod +x target/x86_64-unknown-linux-musl/release/personal_website
            RUST_LOG=info ./target/x86_64-unknown-linux-musl/release/personal_website &
            sleep 5
          background: true
      - run:
          name: Wait for server to start
          command: |
            timeout 30 bash -c 'until curl -sf http://localhost:8000/health -o /dev/null; do sleep 1; done'
            echo "✓ Server is up and running"
      - run:
          name: Test endpoints
          command: |
            # Test health endpoint
            curl -sf http://localhost:8000/health -o /dev/null && echo "✓ Health check passed"
            
            # Test main page
            curl -sf http://localhost:8000/ -o /dev/null && echo "✓ Main page accessible"
            
            # Test WASM assets
            curl -sf http://localhost:8000/static/wasm/wasm_frontend.js -o /dev/null && echo "✓ WASM JS accessible"
            curl -sf http://localhost:8000/static/wasm/wasm_frontend_bg.wasm -o /dev/null && echo "✓ WASM binary accessible"
            
            # Test Vite assets
            curl -sf http://localhost:8000/static/.vite/manifest.json -o /dev/null && echo "✓ Vite manifest accessible"

  # Package for bare metal deployment
  package-deployment:
    executor: deploy-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Create deployment package
          command: |
            mkdir -p deploy-package
            
            # Copy binary
            cp target/x86_64-unknown-linux-musl/release/personal_website deploy-package/
            chmod +x deploy-package/personal_website
            
            # Copy templates and static files
            cp -r templates deploy-package/
            cp -r static deploy-package/
            
            # Create systemd service file
            cat > deploy-package/portfolio.service \<< 'EOF'
            [Unit]
            Description=Personal Portfolio Website
            After=network.target
            
            [Service]
            Type=exec
            User=www-data
            Group=www-data
            WorkingDirectory=/opt/portfolio
            ExecStart=/opt/portfolio/personal_website
            Restart=always
            RestartSec=5
            Environment=RUST_LOG=info
            Environment=HOST=0.0.0.0
            Environment=PORT=8000
            
            # Security settings
            NoNewPrivileges=true
            PrivateTmp=true
            ProtectSystem=strict
            ProtectHome=true
            ReadWritePaths=/opt/portfolio
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # Create deployment script
            cat > deploy-package/deploy.sh \<< 'EOF'
            #!/bin/bash
            set -e
            
            echo "🚀 Starting bare metal deployment..."
            
            # Stop existing service
            sudo systemctl stop portfolio || true
            
            # Backup current deployment
            sudo mv /opt/portfolio /opt/portfolio.backup.$(date +%s) || true
            
            # Create directory and copy files
            sudo mkdir -p /opt/portfolio
            sudo cp -r * /opt/portfolio/
            sudo chown -R www-data:www-data /opt/portfolio
            
            # Install and start service
            sudo cp portfolio.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable portfolio
            sudo systemctl start portfolio
            
            # Health check
            sleep 5
            curl -f http://localhost:8000/health || exit 1
            
            echo "✅ Deployment completed successfully!"
            EOF
            chmod +x deploy-package/deploy.sh
            
            # Create archive
            tar -czf portfolio-deploy.tar.gz -C deploy-package .
      - persist_to_workspace:
          root: .
          paths:
            - portfolio-deploy.tar.gz

  # Deploy to production (bare metal)
  deploy-production:
    executor: deploy-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - "SHA256:ge50UMA30q/hgTEUuAKltaEcXJO3WXliuqFvNnpTdlw"
      - run:
          name: Deploy to production server
          command: |
            echo "🚀 Deploying bare metal Rust application..."
            echo "Deployment package: portfolio-deploy.tar.gz"
            
            # Transfer deployment package to server
            scp -o StrictHostKeyChecking=no portfolio-deploy.tar.gz ubuntu@129.80.170.232:/tmp/
            
            # Execute bare metal deployment
            ssh -o StrictHostKeyChecking=no ubuntu@129.80.170.232 \<< 'DEPLOY_SCRIPT'
              cd /tmp
              
              # CLEANUP: Stop and remove existing Docker containers
              echo "🧹 Cleaning up Docker containers..."
              sudo docker stop portfolio || true
              sudo docker rm portfolio || true
              sudo docker system prune -f || true
              
              # Install dependencies
              echo "📦 Installing system dependencies..."
              sudo apt update
              sudo apt install -y nginx curl
              
              # Create www-data user if it doesn't exist
              sudo useradd -r -s /bin/false www-data || true
              
              # Extract deployment package
              rm -rf portfolio-deploy
              mkdir portfolio-deploy
              tar -xzf portfolio-deploy.tar.gz -C portfolio-deploy
              cd portfolio-deploy
              
              # Run deployment script
              ./deploy.sh
              
              # Setup nginx proxy (force reconfigure)
              echo "🌐 Configuring nginx proxy..."
              sudo tee /etc/nginx/sites-available/portfolio \<< 'NGINX_CONF'
            server {
                listen 80 default_server;
                server_name _;
                
                location / {
                    proxy_pass http://127.0.0.1:8000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
                
                location /health {
                    proxy_pass http://127.0.0.1:8000/health;
                    access_log off;
                }
            }
            NGINX_CONF
              
              # Remove default nginx config and enable ours
              sudo rm -f /etc/nginx/sites-enabled/default
              sudo ln -sf /etc/nginx/sites-available/portfolio /etc/nginx/sites-enabled/
              sudo nginx -t && sudo systemctl restart nginx
              
              # Final health check through nginx
              sleep 5
              curl -f http://localhost/health || exit 1
              
              # Cleanup
              cd /tmp
              rm -rf portfolio-deploy portfolio-deploy.tar.gz
            DEPLOY_SCRIPT
            
            echo "✅ Bare metal deployment completed successfully!"
            echo "🌐 Application available at: http://129.80.170.232"

# Workflows - Define job orchestration
workflows:
  version: 2
  
  # Main workflow for all commits
  build-test-deploy:
    jobs:
      # Setup phase (parallel)
      - setup-rust:
          filters:
            branches:
              ignore: /^dependabot\/.*/
      - setup-frontend:
          filters:
            branches:
              ignore: /^dependabot\/.*/
      
      # Quality checks (parallel, after setup)
      - code-quality:
          requires:
            - setup-rust
      - test:
          requires:
            - setup-rust
      
      # Build phase (parallel, after setup)
      - build-frontend:
          requires:
            - setup-frontend
      - build-wasm:
          requires:
            - setup-rust
      - build-rust:
          requires:
            - setup-rust
            - build-frontend
            - build-wasm
      
      # Integration testing
      - integration-test:
          requires:
            - build-rust
            - code-quality
            - test
      
      # Package for bare metal deployment
      - package-deployment:
          requires:
            - integration-test
          filters:
            branches:
              only: 
                - main
                - master
                - develop
      
      # Production deployment (only on main/master)
      - deploy-production:
          requires:
            - package-deployment
          filters:
            branches:
              only: 
                - main
                - master
          context: production-deploy  # CircleCI context for production secrets

  # Security and dependency updates
  security-check:
    triggers:
      - schedule:
          cron: "0 2 * * 1"  # Weekly on Monday at 2 AM
          filters:
            branches:
              only: main
    jobs:
      - setup-rust
      - code-quality:
          requires:
            - setup-rust

# Configuration for build optimization
parameters:
  rust-version:
    type: string
    default: "1.83"
  node-version:
    type: string
    default: "18.19"